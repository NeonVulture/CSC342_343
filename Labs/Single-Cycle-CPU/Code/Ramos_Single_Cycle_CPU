-- Copyright (C) 2018  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details.

-- PROGRAM		"Quartus Prime"
-- VERSION		"Version 18.0.0 Build 614 04/24/2018 SJ Lite Edition"
-- CREATED		"Sun May 09 23:51:27 2021"

LIBRARY ieee;
USE ieee.std_logic_1164.all; 

LIBRARY work;

ENTITY Ramos_Single_Cycle_CPU IS 
	PORT
	(
		Clock :  IN  STD_LOGIC;
		MemRd :  IN  STD_LOGIC;
		PC_4 :  IN  STD_LOGIC_VECTOR(31 DOWNTO 0);
		V_FLAG :  OUT  STD_LOGIC;
		N_FLAG :  OUT  STD_LOGIC;
		Cout :  OUT  STD_LOGIC;
		ALUResultU :  OUT  STD_LOGIC_VECTOR(31 DOWNTO 0)
	);
END Ramos_Single_Cycle_CPU;

ARCHITECTURE bdf_type OF Ramos_Single_Cycle_CPU IS 

COMPONENT ramos_instruction_memory
	PORT(InstrAddress : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		 Funct : OUT STD_LOGIC_VECTOR(5 DOWNTO 0);
		 Immediate : OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
		 Jump_Address : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		 Opcode : OUT STD_LOGIC_VECTOR(5 DOWNTO 0);
		 Rd : OUT STD_LOGIC_VECTOR(4 DOWNTO 0);
		 Rs : OUT STD_LOGIC_VECTOR(4 DOWNTO 0);
		 Rt : OUT STD_LOGIC_VECTOR(4 DOWNTO 0);
		 Shmat : OUT STD_LOGIC_VECTOR(4 DOWNTO 0)
	);
END COMPONENT;

COMPONENT ramos_2to1_mux_5bit
	PORT(SEL : IN STD_LOGIC;
		 D0 : IN STD_LOGIC_VECTOR(4 DOWNTO 0);
		 D1 : IN STD_LOGIC_VECTOR(4 DOWNTO 0);
		 OUT1 : OUT STD_LOGIC_VECTOR(4 DOWNTO 0)
	);
END COMPONENT;

COMPONENT ramos_control_unit
	PORT(Funct : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
		 Opcode : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
		 ExtOp : OUT STD_LOGIC;
		 RegWr : OUT STD_LOGIC;
		 RegDst : OUT STD_LOGIC;
		 ALUSrc : OUT STD_LOGIC;
		 MemToReg : OUT STD_LOGIC;
		 MemWr : OUT STD_LOGIC;
		 Branch : OUT STD_LOGIC;
		 Jump : OUT STD_LOGIC;
		 ALUCtrl : OUT STD_LOGIC_VECTOR(3 DOWNTO 0)
	);
END COMPONENT;

COMPONENT ramos_shift2
	PORT(PC_In : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		 PC_Shift : OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
	);
END COMPONENT;

COMPONENT ramos_2to1_mux
	PORT(SEL : IN STD_LOGIC;
		 D0 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		 D1 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		 OUT1 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
	);
END COMPONENT;

COMPONENT ramos_alu
	PORT(ALUCtrl : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
		 Operand1 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		 Operand2 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		 V_FLAG : OUT STD_LOGIC;
		 Z_FLAG : OUT STD_LOGIC;
		 N_FLAG : OUT STD_LOGIC;
		 Cout : OUT STD_LOGIC;
		 ALUResultL : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		 ALUResultU : OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
	);
END COMPONENT;

COMPONENT ramos_signzero_ext
	PORT(ExtOp : IN STD_LOGIC;
		 A : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
		 Output : OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
	);
END COMPONENT;

COMPONENT ramos_datamemory
	PORT(clock : IN STD_LOGIC;
		 MemWr : IN STD_LOGIC;
		 MemRd : IN STD_LOGIC;
		 address : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		 dataWr : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		 dataRd : OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
	);
END COMPONENT;

COMPONENT ramos_registerfile
	PORT(Clock : IN STD_LOGIC;
		 RegWr : IN STD_LOGIC;
		 BusW : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		 Ra : IN STD_LOGIC_VECTOR(4 DOWNTO 0);
		 Rb : IN STD_LOGIC_VECTOR(4 DOWNTO 0);
		 Rw : IN STD_LOGIC_VECTOR(4 DOWNTO 0);
		 BusA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		 BusB : OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
	);
END COMPONENT;

COMPONENT ramos_adder
	PORT(dataa : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		 datab : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		 result : OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
	);
END COMPONENT;

COMPONENT ramos_pc_register
	PORT(Clock : IN STD_LOGIC;
		 PC_In : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		 PC_Out : OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
	);
END COMPONENT;

SIGNAL	SYNTHESIZED_WIRE_38 :  STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_1 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_39 :  STD_LOGIC_VECTOR(4 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_3 :  STD_LOGIC_VECTOR(4 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_4 :  STD_LOGIC_VECTOR(5 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_5 :  STD_LOGIC_VECTOR(5 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_40 :  STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_7 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_8 :  STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_9 :  STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_10 :  STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_11 :  STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_12 :  STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_13 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_14 :  STD_LOGIC_VECTOR(15 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_15 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_41 :  STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_42 :  STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_18 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_20 :  STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_21 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_22 :  STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_23 :  STD_LOGIC_VECTOR(4 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_25 :  STD_LOGIC_VECTOR(4 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_26 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_43 :  STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_28 :  STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_31 :  STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_32 :  STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_33 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_36 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_37 :  STD_LOGIC;


BEGIN 



b2v_inst : ramos_instruction_memory
PORT MAP(InstrAddress => SYNTHESIZED_WIRE_38,
		 Funct => SYNTHESIZED_WIRE_4,
		 Immediate => SYNTHESIZED_WIRE_14,
		 Jump_Address => SYNTHESIZED_WIRE_9,
		 Opcode => SYNTHESIZED_WIRE_5,
		 Rd => SYNTHESIZED_WIRE_3,
		 Rs => SYNTHESIZED_WIRE_23,
		 Rt => SYNTHESIZED_WIRE_39);


b2v_inst1 : ramos_2to1_mux_5bit
PORT MAP(SEL => SYNTHESIZED_WIRE_1,
		 D0 => SYNTHESIZED_WIRE_39,
		 D1 => SYNTHESIZED_WIRE_3,
		 OUT1 => SYNTHESIZED_WIRE_25);


b2v_inst10 : ramos_control_unit
PORT MAP(Funct => SYNTHESIZED_WIRE_4,
		 Opcode => SYNTHESIZED_WIRE_5,
		 ExtOp => SYNTHESIZED_WIRE_13,
		 RegWr => SYNTHESIZED_WIRE_21,
		 RegDst => SYNTHESIZED_WIRE_1,
		 ALUSrc => SYNTHESIZED_WIRE_33,
		 MemToReg => SYNTHESIZED_WIRE_18,
		 MemWr => SYNTHESIZED_WIRE_15,
		 Branch => SYNTHESIZED_WIRE_36,
		 Jump => SYNTHESIZED_WIRE_7,
		 ALUCtrl => SYNTHESIZED_WIRE_10);


b2v_inst11 : ramos_shift2
PORT MAP(PC_In => SYNTHESIZED_WIRE_40,
		 PC_Shift => SYNTHESIZED_WIRE_31);


b2v_inst12 : ramos_2to1_mux
PORT MAP(SEL => SYNTHESIZED_WIRE_7,
		 D0 => SYNTHESIZED_WIRE_8,
		 D1 => SYNTHESIZED_WIRE_9,
		 OUT1 => SYNTHESIZED_WIRE_32);


b2v_inst13 : ramos_alu
PORT MAP(ALUCtrl => SYNTHESIZED_WIRE_10,
		 Operand1 => SYNTHESIZED_WIRE_11,
		 Operand2 => SYNTHESIZED_WIRE_12,
		 V_FLAG => V_FLAG,
		 Z_FLAG => SYNTHESIZED_WIRE_37,
		 N_FLAG => N_FLAG,
		 Cout => Cout,
		 ALUResultL => SYNTHESIZED_WIRE_41,
		 ALUResultU => ALUResultU);


b2v_inst14 : ramos_signzero_ext
PORT MAP(ExtOp => SYNTHESIZED_WIRE_13,
		 A => SYNTHESIZED_WIRE_14,
		 Output => SYNTHESIZED_WIRE_40);


b2v_inst15 : ramos_datamemory
PORT MAP(clock => Clock,
		 MemWr => SYNTHESIZED_WIRE_15,
		 MemRd => MemRd,
		 address => SYNTHESIZED_WIRE_41,
		 dataWr => SYNTHESIZED_WIRE_42,
		 dataRd => SYNTHESIZED_WIRE_20);


b2v_inst16 : ramos_2to1_mux
PORT MAP(SEL => SYNTHESIZED_WIRE_18,
		 D0 => SYNTHESIZED_WIRE_41,
		 D1 => SYNTHESIZED_WIRE_20,
		 OUT1 => SYNTHESIZED_WIRE_22);


b2v_inst2 : ramos_registerfile
PORT MAP(Clock => Clock,
		 RegWr => SYNTHESIZED_WIRE_21,
		 BusW => SYNTHESIZED_WIRE_22,
		 Ra => SYNTHESIZED_WIRE_23,
		 Rb => SYNTHESIZED_WIRE_39,
		 Rw => SYNTHESIZED_WIRE_25,
		 BusA => SYNTHESIZED_WIRE_11,
		 BusB => SYNTHESIZED_WIRE_42);


b2v_inst3 : ramos_2to1_mux
PORT MAP(SEL => SYNTHESIZED_WIRE_26,
		 D0 => SYNTHESIZED_WIRE_43,
		 D1 => SYNTHESIZED_WIRE_28,
		 OUT1 => SYNTHESIZED_WIRE_8);


b2v_inst4 : ramos_adder
PORT MAP(dataa => SYNTHESIZED_WIRE_38,
		 datab => PC_4,
		 result => SYNTHESIZED_WIRE_43);


b2v_inst5 : ramos_adder
PORT MAP(dataa => SYNTHESIZED_WIRE_43,
		 datab => SYNTHESIZED_WIRE_31,
		 result => SYNTHESIZED_WIRE_28);


b2v_inst7 : ramos_pc_register
PORT MAP(Clock => Clock,
		 PC_In => SYNTHESIZED_WIRE_32,
		 PC_Out => SYNTHESIZED_WIRE_38);


b2v_inst8 : ramos_2to1_mux
PORT MAP(SEL => SYNTHESIZED_WIRE_33,
		 D0 => SYNTHESIZED_WIRE_42,
		 D1 => SYNTHESIZED_WIRE_40,
		 OUT1 => SYNTHESIZED_WIRE_12);


SYNTHESIZED_WIRE_26 <= SYNTHESIZED_WIRE_36 AND SYNTHESIZED_WIRE_37;


END bdf_type;
